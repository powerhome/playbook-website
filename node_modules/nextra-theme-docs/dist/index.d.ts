import { PageOpts } from 'nextra';
import React, { PropsWithChildren, ReactNode, ReactElement, FC } from 'react';
import { ThemeProviderProps } from 'next-themes/dist/types';

interface DocsThemeConfig {
    projectLink?: string;
    github?: string;
    projectLinkIcon?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    docsRepositoryBase?: string;
    titleSuffix?: string | ((props: {
        locale: string;
        config: DocsThemeConfig;
        title: string;
        meta: Meta;
    }) => string);
    nextLinks?: boolean;
    prevLinks?: boolean;
    search?: boolean;
    darkMode?: boolean;
    nextThemes?: Pick<ThemeProviderProps, 'defaultTheme' | 'storageKey' | 'forcedTheme'>;
    defaultMenuCollapsed?: boolean;
    font?: boolean;
    footer?: boolean;
    footerText?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    footerEditLink?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    logo?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    head?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
        config: DocsThemeConfig;
        title: string;
        meta: Meta;
    }>>;
    direction?: 'ltr' | 'rtl';
    i18n?: {
        locale: string;
        text: string;
        direction: string;
    }[];
    floatTOC?: boolean;
    unstable_faviconGlyph?: string;
    feedbackLink?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    feedbackLabels?: string;
    customSearch?: React.ReactNode | false;
    searchPlaceholder?: string | ((props: {
        locale: string;
    }) => string);
    projectChatLink?: string;
    projectChatLinkIcon?: React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    sidebarSubtitle?: React.FC<PropsWithChildren<{
        title: string;
    }>>;
    banner?: React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    bannerKey?: string;
    gitTimestamp?: string | React.FC<PropsWithChildren<{
        locale: string;
        timestamp: Date;
    }>>;
    tocExtraContent?: React.FC<PropsWithChildren<{
        locale: string;
    }>>;
    unstable_searchResultEmpty?: React.ReactNode | React.FC<PropsWithChildren<{
        locale: string;
    }>>;
}
declare type PageTheme = {
    navbar: boolean;
    sidebar: boolean;
    toc: boolean;
    pagination: boolean;
    footer: boolean;
    layout: 'default' | 'full' | 'raw';
    typesetting: 'default' | 'article';
    breadcrumb: boolean;
};
declare type Meta = Record<string, any>;

declare const getComponents: () => {
    h2: ({ children, id, ...props }: {
        tag: any;
        children: ReactNode;
        id: string;
    }) => ReactElement;
    h3: ({ children, id, ...props }: {
        tag: any;
        children: ReactNode;
        id: string;
    }) => ReactElement;
    h4: ({ children, id, ...props }: {
        tag: any;
        children: ReactNode;
        id: string;
    }) => ReactElement;
    h5: ({ children, id, ...props }: {
        tag: any;
        children: ReactNode;
        id: string;
    }) => ReactElement;
    h6: ({ children, id, ...props }: {
        tag: any;
        children: ReactNode;
        id: string;
    }) => ReactElement;
    a: ({ href, ...props }: {
        [x: string]: any;
        href?: string | undefined;
    }) => ReactElement;
    table: ({ children }: {
        children: ReactNode;
    }) => JSX.Element;
    details: ({ children, open, ...props }: {
        children: ReactNode;
        open?: boolean | undefined;
    }) => ReactElement;
    summary: ({ children, ...props }: {
        children: ReactNode;
    }) => ReactElement;
};

declare function Layout(props: any): JSX.Element;
declare function withLayout(route: string, Content: FC, pageOpts: PageOpts, themeConfig: DocsThemeConfig): typeof Layout;

export { DocsThemeConfig, PageTheme, withLayout as default, getComponents };
