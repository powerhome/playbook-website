// src/components/tabs.tsx
import React from "react";
import cn from "classnames";
import { Tab as HeadlessTab } from "@headlessui/react";
function isTabItem(item) {
  if (item && typeof item === "object" && "label" in item)
    return true;
  return false;
}
var renderTab = (item) => {
  if (isTabItem(item)) {
    return item.label;
  }
  return item;
};
function Tabs({
  items,
  selectedIndex,
  defaultIndex,
  onChange,
  children
}) {
  return /* @__PURE__ */ React.createElement(HeadlessTab.Group, {
    selectedIndex,
    defaultIndex,
    onChange
  }, /* @__PURE__ */ React.createElement("div", {
    className: "no-scrollbar -m-2 overflow-x-auto overflow-y-hidden overscroll-x-contain p-2"
  }, /* @__PURE__ */ React.createElement(HeadlessTab.List, {
    className: "mt-4 flex w-max min-w-full border-b border-gray-200 pb-px dark:border-neutral-800"
  }, items.map((item, index) => {
    const disabled = !!(item && typeof item === "object" && "disabled" in item && item.disabled);
    return /* @__PURE__ */ React.createElement(HeadlessTab, {
      key: index,
      disabled,
      className: ({ selected }) => cn("text-md mr-2 p-2 font-medium leading-5 transition-colors", "-mb-0.5 select-none rounded-[1px] border-b-2 ring-offset-2 focus:outline-none focus-visible:ring", selected ? "border-primary-500 text-primary-500" : "border-transparent text-gray-600 hover:border-gray-200 hover:text-black dark:text-gray-200 dark:hover:border-neutral-800 dark:hover:text-white", disabled && "pointer-events-none text-gray-400 dark:text-neutral-600")
    }, renderTab(item));
  }))), /* @__PURE__ */ React.createElement(HeadlessTab.Panels, null, children));
}
function Tab({ children }) {
  return /* @__PURE__ */ React.createElement(HeadlessTab.Panel, {
    className: "focus:outline-none focus-visible:ring"
  }, children);
}
export {
  Tab,
  Tabs
};
