import { Heading as Heading$1 } from 'mdast';
import { ProcessorOptions } from '@mdx-js/mdx';
import { Options } from 'rehype-pretty-code';

declare abstract class NextraPluginCache {
    cache: {
        items: PageMapItem[];
        fileMap: Record<string, any>;
    } | null;
    constructor();
    set(data: {
        items: PageMapItem[];
        fileMap: Record<string, any>;
    }): void;
    clear(): void;
    get(): {
        items: PageMapItem[];
        fileMap: Record<string, any>;
    } | null;
}
interface LoaderOptions extends NextraConfig {
    pageImport?: boolean;
    locales: string[];
    defaultLocale: string;
    pageMapCache: NextraPluginCache;
    newNextLinkBehavior?: boolean;
}
interface PageMapItem {
    name: string;
    route: string;
    locale?: string;
    children?: PageMapItem[];
    timestamp?: number;
    frontMatter?: Record<string, any>;
    meta?: Record<string, any>;
    active?: boolean;
}
declare type Heading = Heading$1 & {
    value: string;
};
declare type Theme = string;
declare type Flexsearch = boolean | {
    codeblocks: boolean;
};
declare type NextraConfig = {
    theme: Theme;
    themeConfig?: string;
    unstable_flexsearch?: Flexsearch;
    unstable_staticImage?: boolean;
    mdxOptions?: Pick<ProcessorOptions, 'rehypePlugins' | 'remarkPlugins'> & {
        rehypePrettyCodeOptions?: Partial<Options>;
    };
};

declare function compileMdx(source: string, mdxOptions?: LoaderOptions['mdxOptions'] & Pick<ProcessorOptions, 'jsx' | 'outputFormat'>, nextraOptions?: Pick<LoaderOptions, 'unstable_staticImage' | 'unstable_flexsearch'>, resourcePath?: string): Promise<{
    structurizedData: {};
    headings: Heading[];
    hasJsxInH1?: boolean | undefined;
    result: string;
}>;

export { compileMdx };
